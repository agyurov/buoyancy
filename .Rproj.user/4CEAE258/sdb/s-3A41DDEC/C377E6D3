{
    "collab_server" : "",
    "contents" : "# functions\n\nmain = function(){\n  source(\"main.R\")\n}\n\n# Set graphics device to windows\ndev.win = function(){\n  if(\"windows\" %in% names(dev.list())){\n    dev.set(dev.list()[\"windows\"])\n  }\n  if(!\"windows\" %in% names(dev.list())){\n    windows()\n  }\n}\n\n# Unique values of each column in a data fram\nunique.data = function(df){\n  return(lapply(df,unique))\n}\n\n# plot.matrix\nplot.matrix = function(x, cutoff=NULL, ...){\n  if(class(x) == \"factanal\"){\n    x = unclass(x$loadings)\n    # if(!is.null(cutoff)){\n    #   x[x<cutoff] = 0\n    #   x[x != 0] = 1\n    # }\n    image(t(apply(x,2,rev)),axes=F, ...)\n    lnx = par(\"usr\")[2]-par(\"usr\")[1]\n    lny = par(\"usr\")[4]-par(\"usr\")[3]\n    # abline(v = seq(par(\"usr\")[1],par(\"usr\")[2],by=lnx/ncol(x)),col=2)\n    \n    axis(1,at = lnx/ncol(x)*(0:(ncol(x)-1)),labels=paste(\"factor\",1:ncol(x)),xpd=NA) # 1/2*ln/ncol(x)+\n    axis(2,at = lny/nrow(x)*(0:(nrow(x)-1)),labels=rev(rownames(x)),las=1,xpd=NA)\n    segments(seq(par(\"usr\")[1],par(\"usr\")[2],by=lnx/ncol(x)),rep(par(\"usr\")[3],ncol(x)),\n             seq(par(\"usr\")[1],par(\"usr\")[2],by=lnx/ncol(x)),rep(par(\"usr\")[4],ncol(x)),col=2)\n    title(paste0(\"Cutoff \",cutoff))\n    return(invisible(NULL))\n  }\n  if(!is.null(cutoff)){\n    x[x<cutoff] = 0\n    col = x\n    col[col != 0] = 1\n  }\n  image(t(apply(x,2,rev)), ...)\n}\n\n# proper positions for text on plots\nmy.par = function(side,scale){\n  environment(globalenv())\n  side.opt = c(\"below\",\"left\",\"above\",\"right\")\n  side.print = paste(side.opt,1:4,collapse=\", \")\n  if(!side %in% side.opt & !side %in% 1:4){\n    print(paste(\"side must be on of: \",side.print,collapse=\" \"))\n  }\n  p = par(\"usr\")\n  if(side == \"below\" | side == 1){\n    x = mean(p[1:2])\n    y = p[3] - dist(p[3:4])*scale\n  }\n  if(side == \"above\" | side == 3){\n    x = mean(p[1:2])\n    y = p[4] + dist(p[3:4])*scale\n  }\n  #\n  if(side == \"left\" | side == 2){\n    y = mean(p[3:4])\n    x = p[1] - dist(p[1:2])*scale\n  }\n  \n  if(side == \"right\" | side == 4){\n    y = mean(p[3:4])\n    x = p[2] + dist(p[1:2])*scale\n  }\n  return(list(x=x,y=y))\n}\n\n# plot NA\nplot.na = function(df,col=NULL,...){\n  df = is.na(df)\n  if(is.null(col)){col=grey.colors(2)}\n  image(t(apply(df,2,rev)),col=grey.colors(2),yaxt=\"n\",xaxt=\"n\",xlab=\"\",ylab=\"\",...)\n  # title(\"Data image\")\n  p = my.par(3,.2)\n  legend(p$x,p$y,\n         xjust=.5,yjust=.5,c(\"Missing data\"),xpd=NA,bty=\"n\",fill=grey.colors(2)[2],cex=1.25)\n}\n\n# for(i in 1:length(full_questions_names)){\n#   print(unique(full_questions_names)[i])\n#   writeClipboard(unique(full_questions_names)[i])\n#   readline(\"continue?\")\n# }\n\nmy.count = function(x){\n  y = unique(x)\n  out = list()\n  for(i in 1:length(y)){\n    out[i] = sum(x %in% y[i])\n  }\n  return(unlist(out))\n}\n\n# proper barplot\nmy.barplot.old = function(df, ...){\n  df = df[,!sapply(df,is.numeric)]\n  if(1 %in% dim(df) | 0 %in% dim(df)){\n    return()\n  }\n  # layout(matrix(1:2,nrow=2,byrow=F),height=c(8,1))\n  x = lapply(df,table)\n  ps = barplot(as.matrix(x[[1]]),width=1/length(x),xlim=c(0,1),col=grey.colors(max(unlist(lapply(x,length)))),...)\n  for(i in 2:length(x)){\n    par(new=T)\n    ps2 = barplot(as.matrix(x[[i]]),bty=\"n\",yaxt=\"n\",xaxt=\"n\",xlim=c(0,1),space=(i-1)+.1,width=1/length(x),\n                  col=grey.colors(max(unlist(lapply(x,length)))))\n    ps = c(ps,ps2)\n  }\n  title()\n  text(x=ps,y=par(\"usr\")[3]-dist(par(\"usr\")[3:4])/10,labels=names(df),xpd=NA,srt=45,col=2,cex=.75)\n  legend(par(\"usr\")[2]+dist(par(\"usr\")[1:2])/50,mean(par(\"usr\")[3:4]),\n         names(x[[which.max(unlist(lapply(x,length)))]]),\n         as.character(levels(df[,1])),bty=\"n\",xpd=NA,\n         fill = grey.colors(max(unlist(lapply(x,length)))),yjust=.5)\n}\n\n# rename levels to max level\nrename.level = function(df,include.na = NULL, ordered){\n  if(ncol(df)<2 & !is.factor(df[,1])){\n    return(df)\n  }\n  max.level = which.max(unlist(lapply(df,function(x) length(levels(x)))))\n  new.level = levels(df[,max.level])\n  if(!is.null(include.na)){\n    df = lapply(df,function(x,y) factor(as.character(x),new.level,ordered = ordered),y=new.level)\n    df = do.call(cbind.data.frame,lapply(df,addNA))\n  }\n  if(is.null(include.na)){\n    df = lapply(df,function(x,y) factor(as.character(x),new.level,ordered = ordered),y=new.level)\n    df = do.call(cbind.data.frame,df)\n  }\n  \n  return(df) \n}\n\n\n# goood stuff\n.BucketEnv = new.env()\nif(\"bucket.RData\" %in% dir()){\n  load(\"bucket.RData\",.BucketEnv)\n}\nbucket = function(...,add = F,env = .BucketEnv,short=T,rmv=F,filef = \"bucket.RData\",empty.bucket=F){\n  #\n  if(empty.bucket){\n    ans = readline(\"Empty the bucket? yes/no \\n\")\n    if(ans == \"yes\"){\n      env = new.env()\n      return(invisible(NULL))\n    }\n    if(ans != \"yes\"){\n      return(invisible(NULL))\n    }\n  }\n  # Exit if add=F and empty bucket\n  if(!add & length(as.list(env))==0 & !rmv){\n    cat(\"Empty bucket, nothing to find here.\\n\")\n    return(invisible(NULL))\n  }\n  # display items if add=F and !empty bucket\n  if(!add & length(as.list(env))!=0 & length(as.character(as.list(substitute(list(...)))[-1]))==0 & !rmv){\n    cat(\"In storage: \\n\")\n    if(short){\n      zz = ls(envir = env)\n      zz2 = lapply(as.list(env),class)\n      names(zz2) = NULL\n      print(data.frame(class=unlist(zz2),name = zz))\n      return(invisible(data.frame(class=unlist(zz2),name = zz)))\n    }\n    if(!short){\n      print(as.list(env))\n    }\n    return(invisible(NULL))\n  }\n  arg = as.character(as.list(substitute(list(...)))[-1])\n  \n  # Check for existence\n  out = arg %in% ls(env)\n  # -----------------------------------------\n  # Return from bucket\n  if(!add & !rmv){\n    if(!all(out)){\n      cat(paste0(paste0(arg[!out],collapse=\", \"),\" not in the bucket. \\n\"))\n      return(invisible(NULL))\n    }\n    if(all(out)){\n      cat(paste0(\"Returning \",paste0(arg[out],collapse = \", \"),\".\\n\"))\n      # new ---\n      for(i in 1:length(out)){\n        assign(arg[out[i]],as.list(env)[arg[out[i]]],envir = .GlobalEnv)\n      }\n      # end new ---\n      return(as.list(env)[arg[out]])\n    }\n    \n  }\n  # -----------------------------------------\n  # Add to bucket\n  if(add & !rmv){\n    # Overwriting\n    if(any(out)){\n      for(i in arg[out]){\n        ans = readline(paste0(i,\" already exist in bucket. Overwrrite? y/n: \\n\"))\n        if(ans == \"y\"){\n          assign(i,eval(parse(text = i)),envir = env)\n          cat(paste0(i,\" added to the bucket!\\n\"))\n        }\n        if(ans == \"n\"){}\n        if(!ans %in% c(\"y\",\"n\")){\n          warning(\"Exitted function - answer me! \")\n        }\n      }\n    }\n    # Not overwriting, just adding\n    for(i in arg[!out]){\n      if(exists(i,envir = .GlobalEnv)){\n        assign(i,eval(parse(text = i)),envir = env)\n        cat(paste0(i,\" added to the bucket!\\n\"))\n      }\n      if(!exists(i,envir = .GlobalEnv)){\n        cat(paste0(\"Object \",i,\" does not exist!\\n\"))\n      }\n    }\n  }\n  # Remove items from bucket\n  if(rmv){\n    for(i in arg){\n      if(!all(out)){\n        cat(paste0(paste0(arg[!out],collapse=\", \"),\" not in the bucket. \\n\"))\n      }\n      if(all(out)){\n        ans = readline(paste0(\"Are you sure you want to remove \",i,\" from the bucket. y/n: \"))\n        if(ans == \"y\"){\n          rm(list=i,envir = env)\n        }\n      }\n    }\n  }\n  # save(list=ls(envir = .BucketEnv),file=paste0(getwd(),\"/\",filef),envir = env)\n  with(env,save.image(paste0(getwd(),\"/\",filOef)))\n}\n\n# Add classes to bucket\nbucket.classes = function(destination = .BucketEnv,classes,from=.GlobalEnv,...){\n  varz = ls(name=from)\n  # varz = varz[216:220]\n  for(i in 1:length(varz)){\n    tmp = eval(parse(text=varz[i]))\n    if(class(tmp) == \"function\"){\n      next\n    }\n    # got to search for classes in lists...\n    tmp = break.list(tmp)\n    if(class(tmp) != \"list\"){\n      tmp = list(tmp)\n    }\n    tmp.class = unlist(lapply(tmp,class))\n    for(j in 1:length(tmp)){\n      if(length(tmp) > 0 && !is.null(tmp) && tmp.class[[j]] %in% classes){\n        obj = tmp[[j]]\n        # ifelse(is.null(names(tmp)[j]),nameend <- \"\", nameend <- names(tmp)[j])\n        # assign(paste0(varz[i],\"_\",nameend),obj,envir = destination)\n        if(is.null(names(tmp)[j])){\n          assign(paste0(varz[i]),obj,envir = destination)\n        }\n        if(!is.null(names(tmp)[j])){\n          assign(paste0(varz[i],\"_\",names(tmp)[j]),obj,envir = destination)\n        }\n      }\n    }\n  }\n}\n\n# break list into list of non list objects \nbreak.list = function(x){\n  if(class(x) != \"list\" & class(x) == \"clm\"){\n    return(list(x))\n  }\n  if(class(x) != \"list\"){\n    return(x)\n  }\n  if(class(x) == \"list\" & length(x) > 0 ){\n    out = NULL\n    for(i in 1:length(x)){\n      out = c(out,break.list(x[[i]]))\n    }\n    return(out)\n  }\n}\n\nbucket.classes(classes=c(\"clm\",\"lm\",\"factanal\",\"cfa\",\"data.frame\"))\nwith(.BucketEnv,save.image(paste0(getwd(),\"/bucket.RData\")))\n# Remove env\n# with(.BucketEnv,rm(list=ls()))\n\n\n# save variables to data_file.RData\nrecord = function(file = data_file){\n  save.image(file)\n}\n\n# data frame factor to numerics\nfact2num = function(y,all=NULL){\n  if(is.null(all)){\n    print(\"opt1\")\n    for(i in 1:ncol(y)){\n      y[,i] = as.numeric(as.character(y[,i]))\n    }\n    return(y)\n  }else{\n    print(\"opt2\")\n   for(i in all){\n     y[,i] = as.numeric(as.character(y[,i]))\n   }\n    return(y)\n  }\n}\n\n# Brute force PCA, returning the PCs\nbrute.force.pca = function(x){\n  y = prcomp(x)\n  return(y$x[, summary(y)$importance[1,] > 1])\n}\n\n# Brute force FA with with pca and pval evaluation\nbrute.force.fa = function(x,...){\n  nfac = sum(prcomp(x)$sdev > 1)\n  nfac = min(floor(ncol(x)/2) - 1,nfac)\n  fa.list = list()\n  for(i in 1:nfac){\n    fa.list[[i]]  = factanal(x,factors = i,...)\n    names(fa.list)[i] = paste0(i,\"factors\")\n    if(is.null(fa.list[[i]]$PVAL) || fa.list[[i]]$PVAL < .05){\n      fa.list[[i]] = NULL\n    }\n  }\n  return(fa.list[!sapply(fa.list,is.null)])\n}\n\n# plot factor loadings\nplot.loadings = function(x,...){\n  y = unclass(x$loadings)\n  apply(y,2, my.barplot, namez = rownames(y), ...)\n  return(invisible(NULL))\n}\n\n# barplot with tilted labels\nmy.barplot = function(x, namez, ...){\n  b = barplot(x, names.arg=NA,...)\n  text(y=par(\"usr\")[3],x = b, labels=namez,srt=45,xpd=NA,...)\n  return(invisible(b))\n}\n\n# predicted classifications from CLM\nclass.pred = function(model){\n  tbl = table(true = model$y,model = predict(model,type=\"class\")$fit,useNA = \"no\")\n  perc = round(diag(tbl)/rowSums(tbl),2)\n  pergroup = rowSums(tbl)\n  total = sum(pergroup)\n  perc2 = round(perc*pergroup/total,2)\n  fk = expand.grid(model$xlevels)\n  fk = cbind(fk,round(predict(model,newdata = fk)$fit,2))\n  return(list(table = tbl, percentages = perc,\n              pop = pergroup, total = sum(perc2), oddz = fk))\n}\n\n# Predicting a questions. df of the form cbind(Q1,Q2)\nmodel.list = function(pred,resp, ...){\n  # x predictors\n  # y responses\n  clms = list()\n  pred = as.data.frame(pred)\n  resp = as.data.frame(resp)\n  \n  for(i in 1:ncol(resp)){\n    df = cbind(pred,Y=resp[,i])\n    frmla = as.formula(paste0(\"Y\",\" ~ \",paste0(names(pred),collapse=\" + \")))\n    # perform LM if numeric\n    if(is.numeric(df$Y)){\n      clms[[i]] = step(lm(formula=frmla,data=df,...),test=\"F\",trace = 0)\n    }\n    # perform CLM if ordinal\n    if(!is.numeric(df$Y)){\n      clms[[i]] = step(clm(formula=frmla,data=df,...),test=\"Chisq\",trace = 0)\n    }\n    cat(paste0(\"Estimating model \",i,\" of \", ncol(resp),\"\\n\"))\n  }\n  names(clms) = names(resp) \n  return(clms)\n}\n\n# model.list + warnings parameter\nmodel.listZ = function(pred,resp,exclude.warnings=T,stepaic=F, ...){\n  # x predictors\n  # y responses\n  clms = list()\n  resp.name = names(resp)\n  pred = as.data.frame(pred)\n  resp = as.data.frame(resp)\n  \n  for(i in 1:ncol(resp)){\n    cat(paste0(\"Estimating model \",i,\" of \", ncol(resp),\"\\n\"))\n    df = cbind(pred,Y=resp[,i])\n    names(df) = c(names(df)[-ncol(df)],resp.name[i])\n    # frmla = as.formula(paste0(\"Y\",\" ~ \",paste0(names(pred),collapse=\" + \")))\n    frmla = as.formula(paste0(names(resp)[i],\" ~ \",paste0(names(pred),collapse=\" + \")))\n    # perform LM if numeric\n    if(is.numeric(df[,ncol(df)])){\n    # if(is.numeric(df[[names(resp)[i]]])){\n      clms[[i]] = step(lm(formula=frmla,data=df,...),test=\"F\",trace = 0)\n    }\n    # perform CLM if ordinal\n    if(!is.numeric(df[,ncol(df)])){\n    # if(!is.numeric(df[[names(resp)[i]]])){\n      if(exclude.warnings){\n        clms[[i]] <- step(clm(formula=frmla,data=df,...),test=\"Chisq\",trace = 0)\n        if(clms[[i]]$convergence$code != 0){\n          cat(paste0(\"CLM convergence code for i = \",i,\" is \", clms[[i]]$convergence$code,\"...\\n\"))\n          clms[i] = \"bad\"\n        }\n      }\n      if(!exclude.warnings){\n        if(!stepaic){\n          clms[[i]] <- step(clm(formula=frmla,data=df,...),test=\"Chisq\",trace = 0)\n        }\n        if(stepaic){\n          clms[[i]] <- stepAIC(clm(formula=frmla,data=df,...),trace = 0)\n        }\n      }\n    }\n  }\n  \n  names(clms) = names(resp)\n  clms = clms[clms!=\"bad\"]\n  return(clms)\n}\n\n# model.list + warnings parameter + second order interactions\nmodel.listZ2 = function(pred,resp,exclude.warnings=T,order=2,trace=0, ...){\n  # x predictors\n  # y responses\n  clms = list()\n  resp.name = names(resp)\n  pred = as.data.frame(pred)\n  resp = as.data.frame(resp)\n  \n  for(i in 1:ncol(resp)){\n    cat(paste0(\"Estimating model \",i,\" of \", ncol(resp),\"\\n\"))\n    df = cbind(pred,Y=resp[,i])\n    names(df) = c(names(df)[-ncol(df)],resp.name[i])\n    frmla =  as.formula(paste0(names(resp)[i],\" ~ \",\"( \",paste0(names(pred),collapse=\" + \"),\" )^\",order))\n    # perform LM if numeric\n    if(is.numeric(df[,ncol(df)])){\n      clms[[i]] = step(lm(formula=frmla,data=df,...),test=\"F\",trace = trace)\n    }\n    # perform CLM if ordinal\n    if(!is.numeric(df[,ncol(df)])){\n      if(exclude.warnings){\n        clms[[i]] <- step(clm(formula=frmla,data=df,...),test=\"Chisq\",trace = trace)\n        if(clms[[i]]$convergence$code != 0){\n          cat(paste0(\"CLM convergence code for i = \",i,\" is \", clms[[i]]$convergence$code,\"...\\n\"))\n          clms[i] = \"bad\"\n        }\n      }\n      if(!exclude.warnings){\n        clms[[i]] <- step(clm(formula=frmla,data=df,...),test=\"Chisq\",trace = trace)\n      }\n    }\n  }\n  \n  names(clms) = names(resp)\n  clms = clms[clms!=\"bad\"]\n  return(clms)\n}\n\n# Predict pred with resp, w/o overlapping. trims NAs. Wrapper of model.list\nmodel.list.adv = function(pred,resp,...){\n  newdf = na.omit(cbind(pred,resp))\n  print(paste0(\"Dim new dat = \",paste0(dim(newdf),collapse=\" \")))\n  fk = model.listZ(pred = newdf[,!grepl(deparse(substitute(resp)),names(newdf))],\n                   resp = newdf[,grepl(deparse(substitute(resp)),names(newdf))],...)\n  return(model.list = fk)\n}\n\n# Predicting each var in a df\nclm.each = function(x,...){\n  clms = list()\n  j = 0\n  for(i in 1:ncol(x)){\n    if(!\"factor\" %in% class(x[,i])){\n      next \n    }\n    j = j + 1\n    cat(paste0(\"Estimating model \",i,\" of \", ncol(x),\"\\n\"))\n    frmla = as.formula(paste0(names(x)[i],\"~.\"))\n    clms[[j]] = step(clm(frmla , data =x,...),trace=0)\n    names(clms)[[j]] = names(x)[i]\n  }\n  # names(clms) = names(x)\n  return(clms)\n}\n\n# Evaluate model\neval.model = function(x,which = c(1:3, 5),...){\n  if(class(x) == \"lm\"){\n    plot(x,which=which,...)\n    acf(resid(x),...)\n    cat(paste0(lillie.test(resid(x))$p.value,\"\\n\"))\n    return(invisible(NULL))\n  }\n  if(class(x) == \"clm\"){\n    return(class.pred(x))\n  }\n}\n\n# ordered factor to un-ordered factor. non factors remain the same\nordfactor = function(x, ordered){\n  if(is.factor(x)){\n    return(factor(x, ordered = ordered))\n  }else{\n    return(x)\n  }\n}\n\n# as.unordered applied to data frames\nordfactordf = function(x,ordered){\n  return(do.call(cbind.data.frame,lapply(x,ordfactor,ordered = ordered)))\n}\n\n# pred.clm, CLM or list of CLMs\nplot.clm = function(x,type=\"l\",lwd=3,...){\n  if(class(x)!=\"list\")x = list(x)\n  if(\"lm\" %in% unlist(lapply(x,class))) {\n    return(stop(\"Please supply CLM objects\"))\n  }\n  plot(rep(1,length(x[[1]]$y)),pch=15,col=\"grey\",bty=\"n\",ylab=\"\",yaxt=\"n\",ylim=c(.8,.8+length(x)*.2),...)\n  for(i in 1:length(x)){\n    points(rep(1,length(x[[1]]$y)) +.2*i,col=\"grey\",pch=15,...)\n    z = x[[i]]\n    zz = ordfactor(z$y,ordered = F)\n    out = zz == predict(x[[i]],type=\"class\")$fit\n    out[!out] = NA\n    points(out+.2*i - .2,lwd=lwd,pch=15,...)\n    legend(\"bottom\",c(\"Correct prediction\",\"Wrong prediction\"),fill=c(1,\"grey\"),bty=\"n\",horiz=T,xpd=NA,...)\n  }\n  text(x = mean(par(\"usr\")[1:2]),y = seq(.9,.9+length(x)*.2-.1,.2), labels=names(x),xpd=NA)\n}\n\n# plot the actual matrix\nplot.matrix2 = function(x,rnd=3,srt=45,lty=2,cutoff=NULL,cex=1,scale=F,scale.lab=.03,...){\n  plot.matrix(round(x),bty=\"n\",col=\"white\",yaxt=\"n\",xaxt=\"n\")\n  xseq = seq(0,1,len=ncol(x))\n  xseq = rep(xseq,each=nrow(x))\n  yseq = seq(0,1,len=nrow(x))\n  yseq = rep(yseq,ncol(x))\n  abline(v = (unique(xseq) - 1/(ncol(x)*2))[-1],col=\"grey\",lty=lty)\n  abline(h = (unique(yseq) - 1/(nrow(x)*2))[-1],col=\"grey\",lty=lty)\n  if(!is.null(cutoff)){\n    x[x<cutoff] = 0\n  }\n  if(scale){\n    cex = cex * x/max(x)\n  }\n  lx = par(\"usr\")[2] - par(\"usr\")[1]\n  ly = par(\"usr\")[4] - par(\"usr\")[3]\n  posx = par(\"usr\")[1] - lx*scale.lab\n  posy = par(\"usr\")[3] - ly*scale.lab\n  text(xseq,rev(yseq),labels = round(x,rnd),xpd=NA,cex=cex)\n  text(unique(xseq),rep(posy,ncol(x)),labels = colnames(x),xpd=NA,srt=srt,...)\n  text(rep(posx,nrow(x)),unique(yseq),labels = rownames(x),xpd=NA,srt=srt,...)\n}\n\n# invert levels of  factors and factors in data.frames\ninvert.level = function(x,vars = NULL){\n  # vars character string of vars to reverse\n  if(class(x)!= \"data.frame\"){\n    x = as.data.frame(x=x)\n  }\n  if(is.null(vars)){\n    x = do.call(cbind.data.frame,lapply(x,function(x) factor(x,labels=rev(levels(x)[levels(x)%in%unique(x)]))))\n  }\n  for(i in vars){\n    x[,i] = factor(x[,i],labels=rev(levels(x[,i])[levels(x[,i])%in%unique(x[,i])]))\n  }\n  return(x)\n}\n\n# Chronebach's alpha recursive\nalpha.recursive = function(dta,...){\n  x = alpha(dta,...)\n  whch = which.max(x$alpha.drop$raw_alpha)\n  if(x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){\n    # print(paste0(rownames(x$alpha.drop)[whch],\": \",\n    #              round(x$alpha.drop$raw_alpha[whch],3),\" vs \",\n    #              round(x$total$raw_alpha,3)))\n    # print(\"--------------\")\n    return(alpha.recursive(dta[,-whch]))\n  }\n  if(!x$alpha.drop$raw_alpha[whch] > x$total$raw_alpha){\n    return(dta)\n  }\n}\n\n\n# Gymnasium 2 functions ---------------------------------------------------\n\n# Add missing factor levels\nfill.levels = function(x,y,...){\n  # x the data frame\n  # y the qustions as character vector\n  tmp = x[,grepl(y,names(x),fixed=T)]\n  # maxlev = which.max(unlist(lapply(tmp,function(x) length(levels(x)))))\n  # maxlev = levels(tmp[,maxlev])\n  maxlev = do.call(c,lapply(tmp,levels))\n  maxlev = unique(maxlev)\n  tmp = do.call(cbind.data.frame,lapply(tmp,function(x,y) x=factor(x,levels=y),y=maxlev))\n  x[,grepl(y,names(x),fixed=T)] = tmp\n  return(x)\n}\n\n# Rename factor levels new\nrm.char.factor = function(x){\n  # x the factor vector\n  if(is.factor(x)){\n    shitbug = c(\"æ\",\"ø\",\"å\")\n    for(i in shitbug){\n      x = tolower(x)\n      x = gsub(\" \",\"\",x,fixed=T)\n      x = iconv(x, \"latin1\", \"ASCII\", sub=\"\")\n    }\n    #x = factor(x)\n    return(x)\n  }\n  if(!is.factor(x)){\n    return(x)\n  }\n}\n\n# Cramer's V\ncv.test = function(x,y) {\n  CV = sqrt(chisq.test(x, y, correct=FALSE)$statistic /\n              (length(x) * (min(length(unique(x)),length(unique(y))) - 1)))\n  print.noquote(\"Cramér V / Phi:\")\n  return(as.numeric(CV))\n}\n\n",
    "created" : 1501650261589.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "2|18|4|0|\n7|21|14|0|\n17|27|19|0|\n22|44|47|0|\n50|30|77|0|\n80|36|88|0|\n96|23|103|0|\n106|35|126|0|\n129|55|145|0|\n153|100|251|0|\n189|4|206|3|\n207|4|250|50|\n254|80|282|0|\n285|25|299|0|\n308|36|310|0|\n313|32|327|0|\n330|30|333|0|\n336|33|348|0|\n351|32|355|0|\n358|37|362|0|\n365|29|375|0|\n378|38|400|0|\n403|68|446|0|\n449|75|484|0|\n487|41|493|0|\n496|27|511|0|\n514|47|524|0|\n527|33|533|0|\n536|34|538|0|\n541|42|557|0|\n560|90|581|0|\n584|39|596|0|\n599|36|612|0|\n615|24|657|0|\n618|32|629|0|\n632|29|647|0|\n650|25|655|0|\n",
    "hash" : "279721093",
    "id" : "C377E6D3",
    "lastKnownWriteTime" : 1501646132,
    "last_content_update" : 1501650735121,
    "path" : "C:/Users/Lenovo/Google Drive/Projects_personal/Rfunctions/Rfunctions.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}